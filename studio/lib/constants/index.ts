export * from './infrastructure'
export * from './metrics'

export const IS_PLATFORM = process.env.NEXT_PUBLIC_IS_PLATFORM === 'true'
export const API_URL = IS_PLATFORM ? process.env.NEXT_PUBLIC_API_URL : '/api'
export const PG_META_URL = IS_PLATFORM
  ? process.env.PLATFORM_PG_META_URL
  : process.env.STUDIO_PG_META_URL

export const DATE_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ'

// Keyboard Shortcuts Related
export const SHORTCUT_KEYS = {
  VIEW_ALL_SHORTCUTS: 'VIEW_ALL_SHORTCUTS',
  TOGGLE_FILTER_MENU: 'TOGGLE_FILTER_MENU',
  TOGGLE_SORT_MENU: 'TOGGLE_SORT_MENU',
  CLOSE_SIDE_PANEL: 'CLOSE_SIDE_PANEL',
  EDIT_CELL: 'EDIT_CELL',
  COPY_CELL: 'COPY_CELL',
  PASTE_CELL: 'PASTE_CELL',
  CREATE_ROW: 'CREATE_ROW',
  EDIT_ROW: 'EDIT_ROW',
  DELETE_ROW: 'DELETE_ROW',
  SCROLL_EDGES: 'SCROLL_EDGES',
}

export const GENERAL_SHORTCUTS = [
  {
    key: SHORTCUT_KEYS.VIEW_ALL_SHORTCUTS,
    name: 'View all shortcuts',
    keys: ['Shift+/'],
  },
  {
    key: SHORTCUT_KEYS.CLOSE_SIDE_PANEL,
    name: 'Close side panel',
    keys: ['Esc'],
  },
]

export const generateEditorShortcuts = (clientOS: string) => {
  const metaKey = clientOS === 'windows' ? 'Ctrl' : '⌘'
  return [
    {
      key: SHORTCUT_KEYS.EDIT_CELL,
      name: 'Edit current cell',
      keys: ['Enter'],
    },
    {
      key: SHORTCUT_KEYS.COPY_CELL,
      name: 'Copy value of current cell',
      keys: [`${metaKey}+C`],
    },
    {
      key: SHORTCUT_KEYS.PASTE_CELL,
      name: 'Paste value into current cell',
      keys: [`${metaKey}+V`],
    },
    {
      key: SHORTCUT_KEYS.CREATE_ROW,
      name: 'Create a new row',
      keys: ['Shift+Enter'],
    },
    {
      key: SHORTCUT_KEYS.SCROLL_EDGES,
      name: 'Scroll to edges of the table',
      keys: [`${metaKey}+↑`, `${metaKey}+→`, `${metaKey}+↓`, `${metaKey}+←`],
    },
  ]
}

export const POLICY_MODAL_VIEWS = {
  SELECTION: 'SELECTION',
  TEMPLATES: 'TEMPLATES',
  EDITOR: 'EDITOR',
  REVIEW: 'REVIEW',
}

export const GOTRUE_ERRORS = {
  UNVERIFIED_GITHUB_USER: 'Error sending confirmation mail',
}

export const STRIPE_PUBLIC_KEY =
  process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY || 'pk_test_XVwg5IZH3I9Gti98hZw6KRzd00v5858heG'

export const USAGE_APPROACHING_THRESHOLD = 0.75

// TODO ids? more template data?
export const PROJECT_TEMPLATES = [
  {
    title: 'Next User Management',
    sql: `-- Create a table for public profiles
    create table profiles (
      id uuid references auth.users on delete cascade not null primary key,
      updated_at timestamp with time zone,
      username text unique,
      full_name text,
      avatar_url text,
      website text,
    
      constraint username_length check (char_length(username) >= 3)
    );
    -- Set up Row Level Security (RLS)
    -- See https://supabase.com/docs/guides/auth/row-level-security for more details.
    alter table profiles
      enable row level security;
    
    create policy "Public profiles are viewable by everyone." on profiles
      for select using (true);
    
    create policy "Users can insert their own profile." on profiles
      for insert with check (auth.uid() = id);
    
    create policy "Users can update own profile." on profiles
      for update using (auth.uid() = id);
    
    -- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
    -- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
    create function public.handle_new_user()
    returns trigger as $$
    begin
      insert into public.profiles (id, full_name, avatar_url)
      values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
      return new;
    end;
    $$ language plpgsql security definer;
    create trigger on_auth_user_created
      after insert on auth.users
      for each row execute procedure public.handle_new_user();
    
    -- Set up Storage!
    insert into storage.buckets (id, name)
      values ('avatars', 'avatars');
    
    -- Set up access controls for storage.
    -- See https://supabase.com/docs/guides/storage#policy-examples for more details.
    create policy "Avatar images are publicly accessible." on storage.objects
      for select using (bucket_id = 'avatars');
    
    create policy "Anyone can upload an avatar." on storage.objects
      for insert with check (bucket_id = 'avatars');`,
  },
  {
    title: 'Todo List',
    sql: `--
      -- For use with:
      -- https://github.com/supabase/supabase/tree/master/examples/todo-list/nextjs-todo-list or
      -- https://github.com/supabase/supabase/tree/master/examples/todo-list/react-todo-list or
      -- https://github.com/supabase/supabase/tree/master/examples/todo-list/sveltejs-todo-list or
      -- https://github.com/supabase/supabase/tree/master/examples/todo-list/vue3-ts-todo-list
      --
      
      create table todos (
        id bigint generated by default as identity primary key,
        user_id uuid references auth.users not null,
        task text check (char_length(task) > 3),
        is_complete boolean default false,
        inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
      );
      alter table todos enable row level security;
      create policy "Individuals can create todos." on todos for
          insert with check (auth.uid() = user_id);
      create policy "Individuals can view their own todos. " on todos for
          select using (auth.uid() = user_id);
      create policy "Individuals can update their own todos." on todos for
          update using (auth.uid() = user_id);
      create policy "Individuals can delete their own todos." on todos for
          delete using (auth.uid() = user_id);`,
  },
  {
    title: 'Slack Clone',
    sql: `--
      -- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
      
      -- Custom types
      create type public.app_permission as enum ('channels.delete', 'messages.delete');
      create type public.app_role as enum ('admin', 'moderator');
      create type public.user_status as enum ('ONLINE', 'OFFLINE');
      
      -- USERS
      create table public.users (
        id          uuid not null primary key, -- UUID from auth.users
        username    text,
        status      user_status default 'OFFLINE'::public.user_status
      );
      comment on table public.users is 'Profile data for each user.';
      comment on column public.users.id is 'References the internal Supabase Auth user.';
      
      -- CHANNELS
      create table public.channels (
        id            bigint generated by default as identity primary key,
        inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
        slug          text not null unique,
        created_by    uuid references public.users not null
      );
      comment on table public.channels is 'Topics and groups.';
      
      -- MESSAGES
      create table public.messages (
        id            bigint generated by default as identity primary key,
        inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,
        message       text,
        user_id       uuid references public.users not null,
        channel_id    bigint references public.channels on delete cascade not null
      );
      comment on table public.messages is 'Individual messages sent by each user.';
      
      -- USER ROLES
      create table public.user_roles (
        id        bigint generated by default as identity primary key,
        user_id   uuid references public.users on delete cascade not null,
        role      app_role not null,
        unique (user_id, role)
      );
      comment on table public.user_roles is 'Application roles for each user.';
      
      -- ROLE PERMISSIONS
      create table public.role_permissions (
        id           bigint generated by default as identity primary key,
        role         app_role not null,
        permission   app_permission not null,
        unique (role, permission)
      );
      comment on table public.role_permissions is 'Application permissions for each role.';
      
      -- authorize with role-based access control (RBAC)
      create function public.authorize(
        requested_permission app_permission,
        user_id uuid
      )
      returns boolean as
      $$
        declare
          bind_permissions int;
        begin
          select
            count(*)
          from public.role_permissions
          inner join public.user_roles on role_permissions.role = user_roles.role
          where
            role_permissions.permission = authorize.requested_permission and
            user_roles.user_id = authorize.user_id
          into bind_permissions;
      
          return bind_permissions > 0;
        end;
      $$
      language plpgsql security definer;
      
      -- Secure the tables
      alter table public.users
        enable row level security;
      alter table public.channels
        enable row level security;
      alter table public.messages
        enable row level security;
      alter table public.user_roles
        enable row level security;
      alter table public.role_permissions
        enable row level security;
      
      create policy "Allow logged-in read access" on public.users
        for select using (auth.role() = 'authenticated');
      create policy "Allow individual insert access" on public.users
        for insert with check (auth.uid() = id);
      create policy "Allow individual update access" on public.users
        for update using ( auth.uid() = id );
      create policy "Allow logged-in read access" on public.channels
        for select using (auth.role() = 'authenticated');
      create policy "Allow individual insert access" on public.channels
        for insert with check (auth.uid() = created_by);
      create policy "Allow individual delete access" on public.channels
        for delete using (auth.uid() = created_by);
      create policy "Allow authorized delete access" on public.channels
        for delete using (authorize('channels.delete', auth.uid()));
      create policy "Allow logged-in read access" on public.messages
        for select using (auth.role() = 'authenticated');
      create policy "Allow individual insert access" on public.messages
        for insert with check (auth.uid() = user_id);
      create policy "Allow individual update access" on public.messages
        for update using (auth.uid() = user_id);
      create policy "Allow individual delete access" on public.messages
        for delete using (auth.uid() = user_id);
      create policy "Allow authorized delete access" on public.messages
        for delete using (authorize('messages.delete', auth.uid()));
      create policy "Allow individual read access" on public.user_roles
        for select using (auth.uid() = user_id);
      
      -- Send "previous data" on change
      alter table public.users
        replica identity full;
      alter table public.channels
        replica identity full;
      alter table public.messages
        replica identity full;
      
      -- inserts a row into public.users and assigns roles
      create function public.handle_new_user()
      returns trigger as
      $$
        declare is_admin boolean;
        begin
          insert into public.users (id, username)
          values (new.id, new.email);
      
          select count(*) = 1 from auth.users into is_admin;
      
          if position('+supaadmin@' in new.email) > 0 then
            insert into public.user_roles (user_id, role) values (new.id, 'admin');
          elsif position('+supamod@' in new.email) > 0 then
            insert into public.user_roles (user_id, role) values (new.id, 'moderator');
          end if;
      
          return new;
        end;
      $$ language plpgsql security definer;
      
      -- trigger the function every time a user is created
      create trigger on_auth_user_created
        after insert on auth.users
        for each row execute procedure public.handle_new_user();
      
      /**
       * REALTIME SUBSCRIPTIONS
       * Only allow realtime listening on public tables.
       */
      
      begin;
        -- remove the realtime publication
        drop publication if exists supabase_realtime;
      
        -- re-create the publication but don't enable it for any tables
        create publication supabase_realtime;
      commit;
      
      -- add tables to the publication
      alter publication supabase_realtime add table public.channels;
      alter publication supabase_realtime add table public.messages;
      alter publication supabase_realtime add table public.users;
      
      -- DUMMY DATA
      insert into public.users (id, username)
      values
          ('8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e', 'supabot');
      
      insert into public.channels (slug, created_by)
      values
          ('public', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),
          ('random', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');
      
      insert into public.messages (message, channel_id, user_id)
      values
          ('Hello World 👋', 1, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),
          ('Perfection is attained, not when there is nothing more to add, but when there is nothing left to take away.', 2, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');
      
      insert into public.role_permissions (role, permission)
      values
          ('admin', 'channels.delete'),
          ('admin', 'messages.delete'),
          ('moderator', 'messages.delete');`,
  },
]
